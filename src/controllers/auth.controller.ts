import { AuthService } from "../services/auth.service.js";

export const AuthController = {
    // üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
    register: async (c: any) => {
        const { username, email, password, otp_code, topic } = await c.req.json();
        // call service
        const newUser = await AuthService.register(username, email, password, otp_code, topic);
        return c.json({ status: 201, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", data: newUser }, 201);
    },

    // üìå ƒêƒÉng nh·∫≠p
    login: async (c: any) => {
        const { username, password } = await c.req.json();
        const data = await AuthService.login(username, password);
        return c.json({ status: 200, message: `ƒêƒÉng nh·∫≠p th√†nh c√¥ng!`, data }, 200);
    },

    // üìå G·ª≠i OTP x√°c th·ª±c email
    sendOTP: async (c: any) => {
        const { email } = await c.req.json();
        await AuthService.getOTP({
            emailTo: email
        });
        return c.json({ status: 200, message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!" }, 200);
    },

    // üìå G·ª≠i OTP x√°c th·ª±c email qu√™n m·∫≠t kh·∫©u
    sendOTPForgotPassword: async (c: any) => {
        const { email } = await c.req.json();
        await AuthService.getOTPForgotPassword({
            emailTo: email
        });
        return c.json({ status: 200, message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!" }, 200);
    },
    verifyOTPForgotPassword: async (c: any) => {
        const { email, otp } = await c.req.json();
        const isValid = await AuthService.verifyOTPForgotPassword(email, otp);
        if (!isValid) return c.json({ status: 400, message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" }, 400);
        return c.json({ status: 200, message: "M√£ OTP h·ª£p l·ªá!" }, 200);
    },
    resetPassword: async (c: any) => {
        const { email, password } = await c.req.json();
        const isReset = await AuthService.resetPassword(email, password);
        if (!isReset) return c.json({ status: 400, message: "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!" }, 400);
        return c.json({ status: 200, message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" }, 200);
    }
};
