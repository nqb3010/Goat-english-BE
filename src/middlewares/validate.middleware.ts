import { z, ZodError } from "zod";
import type { Context } from "hono";

// üìå Middleware validate ƒë·∫ßu v√†o v·ªõi zod
export const validate = (schema: z.ZodSchema) => {
    return async (c: Context, next: () => Promise<void>) => {
        try {
            const body = await c.req.json();
            schema.parse(body);
            await next(); // Ch·∫°y middleware ti·∫øp theo
        } catch (error) {
            if (error instanceof ZodError) {
                return c.json({
                    message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!",
                    errors: error.errors.map(err => ({
                        field: err.path.join("."), // L·∫•y t√™n tr∆∞·ªùng b·ªã l·ªói
                        message: err.message // Th√¥ng b√°o l·ªói c·ª• th·ªÉ
                    }))
                }, 400);
            }
            return c.json({ message: "L·ªói h·ªá th·ªëng!" }, 500);
        }
    };
};